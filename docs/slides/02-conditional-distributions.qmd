---
title: "Visualizing and Comparing Categorical Variables"
format:  
  revealjs: 
    theme: [default, style.scss]
execute:
  echo: true
editor: source
---

```{r}
#| include: false
#| label: load-package-set-python-directory

library(reticulate)
use_python("/usr/local/bin/python3")
```

```{python}
#| include: false
#| label: import-packages

import numpy as np
import pandas as pd
```

# The story so far...

## Getting and Prepping Data

```{python}
#| code-line-numbers: false
#| label: read-data

df = pd.read_csv("https://datasci112.stanford.edu/data/titanic.csv")
```

```{python}
#| code-line-numbers: false
#| label: changing-data-type

df["pclass"] = df["pclass"].astype("category")
df["survived"] = df["survived"].astype("category")
```

## Thinking About Variable Types

::: {.small}
```{r}
#| echo: false
#| label: data-frame-table

knitr::kable(head(py$df))
```
:::


## Accessing Rows and Columns

::::: columns
::: {.column width="50%"}
```{python}
#| label: iloc

df.iloc[5,]
```
:::

::: {.column width="50%"}
```{python}
#| code-line-numbers: false
#| label: accessing-column

df["name"].head()
```
:::
:::::

## Quick Summary of Quantitative Variables

::: {.small}
```{python}
#| code-line-numbers: false
#| label: summarizing-data

df.describe()
```
:::

## Summarizing Categorical Variables

The list of percents for each category is called the **distribution** of the variable.

```{python}
#| code-line-numbers: false
#| label: counts-and-proportions-of-different-classes

df["pclass"].value_counts()
df["pclass"].value_counts(normalize = True)
```

# Visualizing One Categorical Variable

## The Grammar of Graphics

The *grammar of graphics* is a framework for creating data visualizations.

::: columns
::: {.column width="40%"}
::: {.small}
A visualization consists of:

-   The **aesthetic**: Which *variables* are dictating which *plot elements*.

-   The **geometry**: What *shape* of plot you are making.

-   The **theme**: Other choices about the appearance.
:::
:::

::: {.column width="5%"}
:::

::: {.column width="55%"}
![](images/02-ggplot-layers.png)
:::
:::

## Example

:::::: columns
:::: {.column width="50%"}
::: small
```{python}
#| eval: false
#| label: code-for-boxplot
#| code-line-numbers: false

import pandas as pd
from palmerpenguins import load_penguins
from plotnine import ggplot, geom_point, aes, geom_boxplot

penguins = load_penguins()

(
  ggplot(data = penguins, mapping = aes(x = "species", 
                                        y = "bill_length_mm", 
                                        fill = "sex")
        ) +
  geom_boxplot()
)
```
:::
::::

::: {.column width="50%"}
```{python}
#| echo: false
#| label: boxplot

import pandas as pd
from palmerpenguins import load_penguins
from plotnine import ggplot, geom_point, aes, geom_boxplot

penguins = load_penguins()

plot = (
  ggplot(penguins, mapping = aes(x = "species", 
                                 y = "bill_length_mm", 
                                 fill = "sex")
        ) +
  geom_boxplot()
)

plot.draw(plot)
```
:::
::::::

. . .

:::::: columns
::: {.column width="50%"}
**Aesthetics**

Where are variables mapped to aspects of the plot?
:::

:::: {.column width="50%"}
::: fragment
**Geometry**

What shape(s) are used to represent the data / observations?
:::
::::
::::::

## plotnine

The `plotnine` library implements the *grammar of graphics* in Python.

-   The `aes()` function is the place to map variables to plot aesthetics.
    -   `x`, `y`, and `fill` are three possible aesthetics that can be specified
-   A variety of `geom_XXX()` functions allow for different plotting shapes (e.g. boxplot, histogram, etc.)
    -   Aesthetics can differ based on the `geom` you choose!

## Themes

::::::: columns
:::: {.column width="50%"}
::: small
```{python}
#| code-fold: true
#| code-line-numbers: false
#| label: boxplot-no-theme-code
#| eval: false

(
  ggplot(data = penguins, mapping = aes(x = "species", 
                                        y = "bill_length_mm", 
                                        fill = "sex")
         ) + 
  geom_boxplot()
)
```
:::

```{python}
#| label: boxplot-no-theme-plot
#| echo: false

plot = (
  ggplot(penguins, aes(x = "species", 
                       y = "bill_length_mm", 
                       fill = "sex")
         ) + 
  geom_boxplot()
)

plot.draw(plot)
```
::::

:::: {.column width="50%"}
::: small
```{python}
#| code-fold: true
#| code-line-numbers: false
#| label: boxplot-theme-classic-code
#| eval: false

from plotnine import theme_bw

(
  ggplot(penguins, aes(x = "species", 
                       y = "bill_length_mm", 
                       fill = "sex")
                       ) + 
  geom_boxplot() + 
  theme_bw()
)
```
:::

```{python}
#| label: boxplot-theme-classic-plot
#| echo: false

from plotnine import theme_bw

plot = (
  ggplot(penguins, aes(x = "species", 
                       y = "bill_length_mm", 
                       fill = "sex")
                       ) + 
  geom_boxplot() + 
  theme_bw()
)

plot.draw(plot)
```
::::
:::::::

## Check-In

What are the *aesthetics* and *geometry* in the cartoon plot below?

![An XKCD comic](https://imgs.xkcd.com/comics/escalators.png){fig-alt="A graph showing the 'urge to try running up the down escalator' (y-axis) against age (x-axis). The y-axis ranges from weak to strong, and the x-axis spans ages 0 to 24. Two lines are plotted: 'What I was supposed to feel,' which peaks at age 10 and declines steeply thereafter; and 'What I've actually felt,' which remains high and relatively flat after age 10. Stick figures are drawn on the graph to illustrate the difference, with labels pointing to key points."}

## Bar Plots

To visualize the **distribution** of a categorical variable, we should use a **bar plot**.

::: small
```{python}
#| code-fold: true
#| code-line-numbers: false
#| label: bar-plot-code
#| eval: false

from plotnine import *

(
  ggplot(data = df, mapping = aes(x = "pclass")) + 
  geom_bar() + 
  theme_bw()
)
```
:::

```{python}
#| label: bar-plot
#| echo: false

from plotnine import *

plot = (
  ggplot(df, mapping = aes(x = "pclass")) + 
  geom_bar() + 
  theme_bw()
)

plot.draw(plot)
```

## Calculating Percents

```{python}
#| code-line-numbers: false
#| label: df-of-proportions

pclass_dist = (
  df['pclass']
  .value_counts(normalize = True)
  .reset_index()
  )
  
pclass_dist
```

## Percents on Plots

::: small
```{python}
#| code-fold: true
#| code-line-numbers: false
#| label: proportion-bar-plot-code
#| eval: false

(
  ggplot(data = pclass_dist, 
         mapping = aes(x = "pclass", y = "proportion")) + 
  geom_col() + ### notice this change to a column plot!
  theme_bw()
)
```
:::

:::::::: columns
::: {.column width="55%"}
```{python}
#| label: proportion-bar-plot
#| echo: false

plot = (
  ggplot(data = pclass_dist, 
         mapping = aes(x = "pclass", y = "proportion")) + 
  geom_col() + ### notice this change to a column plot!
  theme_bw()
)

plot.draw(plot)
```
:::

::: {.column width="5%"}
:::

::::: {.column width="40%"}
:::: fragment
::: small
::: callout-tip
Technically, you could still use `geom_bar()`, but you would need to specify that you didn't want it to use `stat = "count"` (the default). You've already calculated the proportions, so you would use `geom_bar(stat = "identity")`.
:::
:::
::::
:::::
::::::::

# Visualizing Two Categorical Variables

## Option 1: Stacked Bar Plot

::: small
```{python}
#| code-fold: true
#| code-line-numbers: false
#| label: stacked-bar-plot-code
#| eval: false

(
  ggplot(data = df, mapping = aes(x = "pclass", fill = "sex")) + 
  geom_bar(position = "stack") + 
  theme_bw()
)
```
:::

```{python}
#| label: stacked-bar-plot
#| echo: false
#| fig-align: center

plot = (
  ggplot(data = df, mapping = aes(x = "pclass", fill = "sex")) + 
  geom_bar(position = "stack") + 
  theme_bw()
)

plot.draw(plot)
```

## Option 1: Stacked Bar Plot

> What are some pros and cons of the stacked bar plot?

:::::::::: columns
::::: {.column width="45%"}
:::: fragment
**Pros**

::: midi
-   We can still see the total counts in each class
-   We can easily compare the `male` counts in each class, since those bars are on the bottom.
:::
::::
:::::

::: {.column width="5%"}
:::

::::: {.column width="45%"}
:::: fragment
**Cons**

::: midi
-   It is hard to compare the `female` counts, since those bars are stacked on top.
-   It is hard to estimate the *distributions*.
:::
::::
:::::
::::::::::

## Option 2: Side-by-Side Bar Plot

::: small
```{python}
#| code-fold: true
#| code-line-numbers: false
#| label: side-by-side-barplot-code
#| eval: false

(
  ggplot(data = df, mapping = aes(x = "pclass", fill = "sex")) + 
  geom_bar(position = "dodge") + 
  theme_bw()
)
```
:::

```{python}
#| label: side-by-side-barplot
#| echo: false
#| fig-align: center

plot = (
  ggplot(data = df, mapping = aes(x = "pclass", fill = "sex")) + 
  geom_bar(position = "dodge") + 
  theme_bw()
)

plot.draw(plot)
```

## Option 2: Side-by-side Bar Plot

> What are some pros and cons of the side-by-side bar plot?

:::::::::: columns
::::: {.column width="45%"}
:::: fragment
**Pros**

::: midi
-   We can easily compare the `female` counts in each class.

-   We can easily compare the `male` counts in each class.

-   We can easily see counts of each within each class.
:::
::::
:::::

::: {.column width="5%"}
:::

::::: {.column width="45%"}
:::: fragment
**Cons**

::: midi
-   It is hard to see *total* counts in each class.

-   It is hard to estimate the *distributions*.
:::
::::
:::::
::::::::::

## Option 3: Stacked Percentage Bar Plot

::: small
```{python}
#| code-fold: true
#| code-line-numbers: false
#| label: stacked-percentage-barplot-code
#| eval: false

(
  ggplot(data = df, mapping = aes(x = "pclass", fill = "sex")) + 
  geom_bar(position = "fill") + 
  theme_bw()
)
```
:::

```{python}
#| label: stacked-percentage-barplot
#| echo: false
#| fig-align: center

plot = (
  ggplot(data = df, mapping = aes(x = "pclass", fill = "sex")) + 
  geom_bar(position = "fill") + 
  theme_bw()
)

plot.draw(plot)
```

## Option 3: Stacked Percentage Bar Plot

> What are some pros and cons of the stacked percentage bar plot?

:::::::::: columns
::::: {.column width="60%"}
:::: fragment
**Pros**

::: midi
-   This is the **best** way to compare sex balance across classes!

-   This is the option I use the most, because it can answer "Are you more likely to find \_\_\_\_\_\_ in \_\_\_\_\_\_ ?" type questions.
:::
::::
:::::

::: {.column width="5%"}
:::

::::: {.column width="35%"}
:::: fragment
**Cons**

::: midi
-   We can no longer see **any** counts!
:::
::::
:::::
::::::::::

## Activity 1.2

::::::: midi
Choose one of the plots from lecture so far and "upgrade" it.

:::::: columns
::: {.column width="60%"}
You can do this by:

-   Finding and using a different `theme`

-   Using `labs()` to change the axis labels

-   Trying different variables

-   Trying a different *geometries*

-   Using `+ scale_fill_manual()` to change the colors being used
:::

:::: {.column width="40%"}
::: callout-tip
-   You will need to use documentation of `plotnine` and online resources!

-   Check out <https://www.data-to-viz.com/> for ideas and example code.

-   Ask GenAI questions like, "What do I add to a plotnine bar plot to change the colors?" *(But of course, make sure you understand the code you use!)*
:::
::::
::::::
:::::::

# Joint distributions

## Two Categorical Variables

```{python}
#| code-line-numbers: false
#| label: counts-for-two-categorical-variables

df[["pclass", "sex"]].value_counts()
```

## Two-way Table

```{python}
#| output-location: column
#| code-line-numbers: false
#| label: pivoting-table-of-counts

(
  df[["pclass", "sex"]]
  .value_counts()
  .unstack()
  )
```

</br>

This is sometimes called a *cross-tab* or *cross-tabulation*.

::: callout-tip
# Pivot Table

Essentially `unstack()` has pivoted the `sex` column from **long format** (where the values are included in one column) to **wide format** where each value has its own column.
:::

## Two-way Table - Percents

```{python}
#| code-line-numbers: false
#| label: pivoted-table-of-percents

(
  df[["pclass", "sex"]]
  .value_counts(normalize = True)
  .unstack()
  )
```

</br>

All of these values should sum to 1, aka, 100%!

## Switching Variable Order

**What cross-tabulation would you expect if we changed the order of the variables? In other words, what would happen if `"sex"` came first and `"pclass"` came second?**

. . .

</br>

```{python}
#| code-line-numbers: false
#| label: changing-order-of-categorical-variables

(
  df[["sex", "pclass"]]
  .value_counts(normalize = True)
  .unstack()
  )
```

## Interpretation

We call this the ***joint distribution*** of the two variables.

```{python}
#| echo: false
#| label: joint-distribution-pclass-sex

( 
  df[["pclass", "sex"]]
  .value_counts(normalize = True)
  .unstack()
  )
  
# Add row totals
#table["Total"] = table.sum(axis = 1)

# Add column totals
#table.loc["Total"] = table.sum(axis = 0)
```

</br>

> Of all the passengers on the Titanic, 11% were female passengers riding in first class.

. . .

-   NOT "11% of all females on Titanic..."
-   NOT "11% of all first class passengers..."

## Conditional Distribution from Counts

We know that:

-   466 passengers identified as **female**

-   Of those 466 passengers, 144 **rode in first class**

. . .

So:

-   144 / 466 = 31% **of female identifying passengers** rode in first class

Here we ***conditioned on*** the passenger being female, and then looked at the ***conditional distribution*** of `pclass`.

## Conditional Distribution from Percentages

We know that:

-   35.5% of all passengers identified as **female**

-   Of those 35.5% of passengers, 11% **rode in first class**

So:

-   0.11 / 0.355 = 31% **of female identifying passengers** rode in first class

Here we ***conditioned on*** the passenger being female, and then looked at the ***conditional distribution*** of `pclass`.

## Swapping Variables

We know that:

-   323 passengers **rode in first class**

-   Of those 323 passengers, 144 **identified as female**

So:

-   144 / 323 = 44.6% **of first class passengers** identified as female

Here we ***conditioned on*** the passenger being in first class, and then looked at the ***conditional distribution*** of `sex`.

## Which one to condition on?

This depends on the **research question** you are trying to answer.

. . .

> "What class did most female identifying passengers ride in?"

-\> Of all *female passengers*, what is the conditional distribution of *class*?

. . .

> "What was the gender breakdown of first class?"

-\> Of all *first class passengers*, what is the conditional distribution of *sex*?

## Calculating in Python

::: midi
When we study two variables, we call the individual one-variable distributions the **marginal distribution** of that variable.
:::

:::::: columns
::: {.column width="47%"}
```{python}
#| code-line-numbers: false
#| label: marginal-class

marginal_class = (
  df['pclass']
  .value_counts(normalize = True)
  )
```

</br>

```{python}
#| code-line-numbers: false
marginal_class
```
:::

::: {.column width="3%"}
:::

::: {.column width="48%"}
```{python}
#| code-line-numbers: false
#| label: marginal-sex

marginal_sex = (
  df['sex']
  .value_counts(normalize = True)
  )
```

</br>

```{python}
#| code-line-numbers: false
marginal_sex
```
:::
::::::

## Calculating in Python

::: midi
We need to divide the **joint distribution** (e.g. "11% of passengers were first class female") by the **marginal distribution** of the variable we want to **condition on** (e.g. 35.5% of passengers were female).
:::

```{python}
#| code-line-numbers: false
#| label: joint-to-marginal-sex

joint_class_sex = (
  df[["pclass", "sex"]]
  .value_counts(normalize = True)
  .unstack()
  )
  
joint_class_sex.divide(marginal_sex)
```

## Check-In

:::::: columns
::: {.column width="40%"}
```{python}
#| code-line-numbers: false
#| label: joint-to-marginal-sex-check-in-part-1

marginal_sex
```
:::

::: {.column width="5%"}
:::

::: {.column width="55%"}
```{python}
#| code-line-numbers: false
#| label: joint-to-marginal-sex-check-in-part-2

joint_class_sex
```
:::
::::::

</br>

:::::: columns
::: {.column width="65%"}
```{python}
#| code-line-numbers: false
#| label: joint-to-marginal-sex-check-in-part-3

joint_class_sex.divide(marginal_sex)
```
:::

::: {.column width="5%"}
:::

::: {.column width="30%"}
**How do you think `divide()` works?**
:::
::::::

## Check-In

Should the **rows** or **columns** add up to 100%? Why?

```{python}
#| echo: false

joint_class_sex.divide(marginal_sex)
```

## Conditional on Class

```{python}
#| code-line-numbers: false
#| label: joint-conditional-on-class

joint_class_sex = (
  df[["sex", "pclass"]]
  .value_counts(normalize = True)
  .unstack()
  )
  
joint_class_sex.divide(marginal_class)
```

## What if you get it backwards?

```{python}
#| code-line-numbers: false
#| label: joint-conditional-wrong-division

joint_class_sex = (
  df[["pclass", "sex"]]
  .value_counts(normalize = True)
  .unstack()
  )
  
joint_class_sex.divide(marginal_class)
```

## Which plot better answers the question:

> "Did women tend to ride in first class more than men?"

::::: columns
::: {.column width="50%"}
```{python}
#| code-fold: true
#| code-line-numbers: false
#| label: filled-bar-plot-question-code
#| eval: false

(
  ggplot(df, aes(x = "pclass", fill = "sex")) + 
  geom_bar(position = "fill") + 
  theme_bw()
)
```

```{python}
#| label: filled-bar-plot-question
#| echo: false

plot = (
  ggplot(df, aes(x = "pclass", fill = "sex")) + 
  geom_bar(position = "fill") + 
  theme_bw()
)

plot.draw(plot)
```
:::

::: {.column width="50%"}
```{python}
#| code-fold: true
#| code-line-numbers: false
#| label: filled-bar-plot-question-code-2
#| eval: false

(
  ggplot(df, aes(x = "sex", fill = "pclass)) + 
  geom_bar(position = "fill") + 
  theme_bw()
)
```

```{python}
#| label: filled-bar-plot-question-2
#| echo: false

plot = (
  ggplot(df, aes(x = "sex", fill = "pclass")) + 
  geom_bar(position = "fill") + 
  theme_bw()
)

plot.draw(plot)
```
:::
:::::

# Takeaways

## Takeaways

:::: midi
::: incremental
-   We use `plotnine` and the **grammar of graphics** to make visuals.

-   For two categorical variables, we might use a **stacked bar plot**, a **side-by-side bar plot**, or a **stacked percentage bar plot** - depending on what we are trying to show.

-   The **joint distribution** of two variables gives the percents in each subcategory.

-   The **marginal distribution** of a variable is its individual distribution.

-   The **conditional distribution** of a variable is its distribution among *only one category* of a different variable.

-   We calculate the **conditional distribution** by dividing the **joint** by the **marginal**.
:::
::::
